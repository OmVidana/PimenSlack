#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>
#include "rsa.h"
#include <SDL2/SDL.h>
#include <SDL2/SDL_ttf.h>
#include <stdbool.h>

#define BUFFER_SIZE 2048
#define WINDOW_WIDTH 800
#define WINDOW_HEIGHT 600

int main() {
    int client_socket;
    struct sockaddr_in server_addr;
    char service[BUFFER_SIZE];
    char username[BUFFER_SIZE];
    char password[BUFFER_SIZE];
    char group_name[BUFFER_SIZE];
    char buffer[BUFFER_SIZE];
    int bytes_received;

    // Initialize SDL
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        fprintf(stderr, "SDL could not initialize! SDL Error: %s\n", SDL_GetError());
        return 1;
    }

    // Initialize SDL_ttf
    if (TTF_Init() == -1) {
        fprintf(stderr, "TTF could not initialize! TTF Error: %s\n", TTF_GetError());
        return 1;
    }

    // Create window
    SDL_Window* window = SDL_CreateWindow("Client", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WINDOW_WIDTH, WINDOW_HEIGHT, SDL_WINDOW_SHOWN);
    if (window == NULL) {
        fprintf(stderr, "Window could not be created! SDL Error: %s\n", SDL_GetError());
        return 1;
    }

    // Create renderer
    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);
    if (renderer == NULL) {
        fprintf(stderr, "Renderer could not be created! SDL Error: %s\n", SDL_GetError());
        return 1;
    }

    // Load font
    TTF_Font* font = TTF_OpenFont("arial.ttf", 16);
    if (font == NULL) {
        fprintf(stderr, "Failed to load font! TTF Error: %s\n", TTF_GetError());
        return 1;
    }

    // Create text input field
    SDL_Rect inputRect = { 10, 10, WINDOW_WIDTH - 20, 30 };
    SDL_Color inputColor = { 255, 255, 255, 255 };
    SDL_StartTextInput();
    char input_text[BUFFER_SIZE] = "";

    client_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (client_socket < 0) {
        perror("Error al crear el socket");
        exit(EXIT_FAILURE);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
    server_addr.sin_port = htons(8080);

    if (connect(client_socket, (struct sockaddr *) &server_addr, sizeof(server_addr)) < 0) {
        perror("Error al conectar al servidor");
        exit(EXIT_FAILURE);
    }

    bytes_received = recv(client_socket, buffer, BUFFER_SIZE, 0);
    char *decrypted = decrypt(buffer);
    if (bytes_received <= 0) {
        perror("Error al recibir datos del servidor");
        exit(EXIT_FAILURE);
    }
    decrypted[bytes_received] = '\0';
    printf("%s", decrypted);

    // Main event loop
    bool quit = false;
    SDL_Event e;
    while (!quit) {
        // Handle events
        while (SDL_PollEvent(&e)) {
            switch (e.type) {
                case SDL_QUIT:
                    quit = true;
                    break;
                case SDL_TEXTINPUT:
                    strcat(input_text, e.text.text);
                    break;
                case SDL_KEYDOWN:
                    if (e.key.keysym.sym == SDLK_RETURN) {
                        // Process input text here
                        strcpy(service, input_text);
                        printf("%s", input_text);

                        // Clear input text after processing
                        memset(input_text, 0, sizeof(input_text));

                        service[strcspn(service, "\n")] = 0;

                        if (strcmp(service, "exit") == 0) {
                            printf("Salida solicitada...\n");
                            send(client_socket, "exit", strlen("exit"), 0);
                            close(client_socket);
                            quit = true;
                            break;
                        }

                        printf("Ingrese el nombre de usuario: ");
                        fgets(username, sizeof(username), stdin);
                        username[strcspn(username, "\n")] = 0;

                        if (strcmp(service, "auth") == 0) {
                            printf("Ingrese la contraseña: ");
                            fgets(password, sizeof(password), stdin);
                            password[strcspn(password, "\n")] = 0;

                            char combined_credentials[BUFFER_SIZE * 2];
                            snprintf(combined_credentials, sizeof(combined_credentials), "autentificar\n%s\n%s", username, password);
                            char* cyphered_credentials = encrypt(combined_credentials);
                            printf("Ciphered credentials: %s\n", cyphered_credentials);
                            send(client_socket, cyphered_credentials, strlen(cyphered_credentials), 0);
                        } else if (strcmp(service, "register") == 0) {
                            printf("Ingrese la contraseña: ");
                            fgets(password, sizeof(password), stdin);
                            password[strcspn(password, "\n")] = 0;

                            char combined_credentials[BUFFER_SIZE * 2];
                            snprintf(combined_credentials, sizeof(combined_credentials), "register\n%s\n%s", username, password);
                            send(client_socket, combined_credentials, strlen(combined_credentials), 0);
                        }
                        else if (strcmp(service, "creargrupo") == 0) {
                            printf("Ingrese el nombre del grupo: ");
                            fgets(group_name, sizeof(group_name), stdin);
                            group_name[strcspn(group_name, "\n")] = 0;

                            char create_group_request[BUFFER_SIZE * 2];
                            snprintf(create_group_request, sizeof(create_group_request), "creargrupo\n%s\n%s", username, group_name);
                            send(client_socket, create_group_request, strlen(create_group_request), 0);
                        } else {
                            printf("Servicio no válido\n");
                            close(client_socket);
                            quit = true;
                            break;
                        }

                        memset(buffer, 0, BUFFER_SIZE);
                        recv(client_socket, buffer, BUFFER_SIZE, 0);
                        printf("%s\n", buffer);
                    }
                    break;
            }
        }

        // Clear screen
        SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
        SDL_RenderClear(renderer);

        // Render input field
        SDL_SetRenderDrawColor(renderer, inputColor.r, inputColor.g, inputColor.b, inputColor.a);
        SDL_RenderDrawRect(renderer, &inputRect);

        // Render text
        SDL_Surface* textSurface = TTF_RenderText_Solid(font, input_text, inputColor);
        if (textSurface != NULL) {
            SDL_Texture* textTexture = SDL_CreateTextureFromSurface(renderer, textSurface);
            SDL_FreeSurface(textSurface);
            if (textTexture != NULL) {
                SDL_RenderCopy(renderer, textTexture, NULL, &inputRect);
                SDL_DestroyTexture(textTexture);
            }
        }

        // Update screen
        SDL_RenderPresent(renderer);
    }

    // Clean up
    SDL_StopTextInput();
    TTF_CloseFont(font);
    TTF_Quit();
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}
