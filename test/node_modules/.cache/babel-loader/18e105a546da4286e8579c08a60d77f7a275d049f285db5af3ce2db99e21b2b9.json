{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabri\\\\Downloads\\\\Pimenton p3\\\\tcp-client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// TcpClientComponent.js\nimport React, { useState, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TcpClientComponent = () => {\n  _s();\n  const [serverResponse, setServerResponse] = useState('');\n  const ws = useRef(null);\n  const connectToServer = () => {\n    if (!ws.current || ws.current.readyState !== WebSocket.OPEN) {\n      ws.current = new WebSocket('ws://localhost:8080');\n      ws.current.onopen = () => {\n        console.log('Connected to C server');\n      };\n      ws.current.onmessage = event => {\n        console.log('Received data from C server:', event.data);\n        setServerResponse(event.data);\n      };\n      ws.current.onclose = () => {\n        console.log('Connection closed');\n      };\n    } else {\n      console.warn('Already connected to C server');\n    }\n  };\n  const sendMessage = message => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      console.log('Sending message to C server:', message);\n      ws.current.send(message);\n    } else {\n      console.error('WebSocket connection not open');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectToServer,\n      children: \"Connect to C Server\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => sendMessage('Hello from React client'),\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Server Response: \", serverResponse]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(TcpClientComponent, \"Hb00ilkd96R87pInTtHzq4rCsuk=\");\n_c = TcpClientComponent;\nexport default TcpClientComponent;\nvar _c;\n$RefreshReg$(_c, \"TcpClientComponent\");","map":{"version":3,"names":["React","useState","useRef","jsxDEV","_jsxDEV","TcpClientComponent","_s","serverResponse","setServerResponse","ws","connectToServer","current","readyState","WebSocket","OPEN","onopen","console","log","onmessage","event","data","onclose","warn","sendMessage","message","send","error","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gabri/Downloads/Pimenton p3/tcp-client/src/App.js"],"sourcesContent":["// TcpClientComponent.js\nimport React, { useState, useRef } from 'react';\n\nconst TcpClientComponent = () => {\n  const [serverResponse, setServerResponse] = useState('');\n  const ws = useRef(null);\n\n  const connectToServer = () => {\n    if (!ws.current || ws.current.readyState !== WebSocket.OPEN) {\n      ws.current = new WebSocket('ws://localhost:8080');\n\n      ws.current.onopen = () => {\n        console.log('Connected to C server');\n      };\n\n      ws.current.onmessage = (event) => {\n        console.log('Received data from C server:', event.data);\n        setServerResponse(event.data);\n      };\n\n      ws.current.onclose = () => {\n        console.log('Connection closed');\n      };\n    } else {\n      console.warn('Already connected to C server');\n    }\n  };\n\n  const sendMessage = (message) => {\n    if (ws.current && ws.current.readyState === WebSocket.OPEN) {\n      console.log('Sending message to C server:', message);\n      ws.current.send(message);\n    } else {\n      console.error('WebSocket connection not open');\n    }\n  };\n\n  return (\n    <div>\n      <button onClick={connectToServer}>Connect to C Server</button>\n      <button onClick={() => sendMessage('Hello from React client')}>Send Message</button>\n      <p>Server Response: {serverResponse}</p>\n    </div>\n  );\n};\n\nexport default TcpClientComponent;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAMQ,EAAE,GAAGP,MAAM,CAAC,IAAI,CAAC;EAEvB,MAAMQ,eAAe,GAAGA,CAAA,KAAM;IAC5B,IAAI,CAACD,EAAE,CAACE,OAAO,IAAIF,EAAE,CAACE,OAAO,CAACC,UAAU,KAAKC,SAAS,CAACC,IAAI,EAAE;MAC3DL,EAAE,CAACE,OAAO,GAAG,IAAIE,SAAS,CAAC,qBAAqB,CAAC;MAEjDJ,EAAE,CAACE,OAAO,CAACI,MAAM,GAAG,MAAM;QACxBC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACtC,CAAC;MAEDR,EAAE,CAACE,OAAO,CAACO,SAAS,GAAIC,KAAK,IAAK;QAChCH,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEE,KAAK,CAACC,IAAI,CAAC;QACvDZ,iBAAiB,CAACW,KAAK,CAACC,IAAI,CAAC;MAC/B,CAAC;MAEDX,EAAE,CAACE,OAAO,CAACU,OAAO,GAAG,MAAM;QACzBL,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAClC,CAAC;IACH,CAAC,MAAM;MACLD,OAAO,CAACM,IAAI,CAAC,+BAA+B,CAAC;IAC/C;EACF,CAAC;EAED,MAAMC,WAAW,GAAIC,OAAO,IAAK;IAC/B,IAAIf,EAAE,CAACE,OAAO,IAAIF,EAAE,CAACE,OAAO,CAACC,UAAU,KAAKC,SAAS,CAACC,IAAI,EAAE;MAC1DE,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEO,OAAO,CAAC;MACpDf,EAAE,CAACE,OAAO,CAACc,IAAI,CAACD,OAAO,CAAC;IAC1B,CAAC,MAAM;MACLR,OAAO,CAACU,KAAK,CAAC,+BAA+B,CAAC;IAChD;EACF,CAAC;EAED,oBACEtB,OAAA;IAAAuB,QAAA,gBACEvB,OAAA;MAAQwB,OAAO,EAAElB,eAAgB;MAAAiB,QAAA,EAAC;IAAmB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC9D5B,OAAA;MAAQwB,OAAO,EAAEA,CAAA,KAAML,WAAW,CAAC,yBAAyB,CAAE;MAAAI,QAAA,EAAC;IAAY;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACpF5B,OAAA;MAAAuB,QAAA,GAAG,mBAAiB,EAACpB,cAAc;IAAA;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEV,CAAC;AAAC1B,EAAA,CAzCID,kBAAkB;AAAA4B,EAAA,GAAlB5B,kBAAkB;AA2CxB,eAAeA,kBAAkB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}