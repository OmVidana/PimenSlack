{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gabri\\\\Downloads\\\\Pimenton p3\\\\tcp-client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TcpClientComponent = () => {\n  _s();\n  const [wasmModule, setWasmModule] = useState(null);\n  useEffect(() => {\n    const loadWasmModule = async () => {\n      try {\n        const module = await import('./tcp_client.wasm');\n        setWasmModule(module);\n      } catch (error) {\n        console.error('Failed to load WebAssembly module:', error);\n      }\n    };\n    loadWasmModule();\n  }, []);\n  const handleConnect = () => {\n    if (wasmModule) {\n      const connectToServer = wasmModule.cwrap('connectToServer', 'number', ['string', 'number']);\n      const result = connectToServer('127.0.0.1', 8080); // Replace with your server IP and port\n      console.log('Connection result:', result);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleConnect,\n      children: \"Connect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(TcpClientComponent, \"RM2QgIXX97g2sneFELw5KH0j6fs=\");\n_c = TcpClientComponent;\nexport default TcpClientComponent;\nvar _c;\n$RefreshReg$(_c, \"TcpClientComponent\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","TcpClientComponent","_s","wasmModule","setWasmModule","loadWasmModule","module","error","console","handleConnect","connectToServer","cwrap","result","log","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gabri/Downloads/Pimenton p3/tcp-client/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst TcpClientComponent = () => {\n  const [wasmModule, setWasmModule] = useState(null);\n\n  useEffect(() => {\n    const loadWasmModule = async () => {\n      try {\n        const module = await import('./tcp_client.wasm');\n        setWasmModule(module);\n      } catch (error) {\n        console.error('Failed to load WebAssembly module:', error);\n      }\n    };\n\n    loadWasmModule();\n  }, []);\n\n  const handleConnect = () => {\n    if (wasmModule) {\n      const connectToServer = wasmModule.cwrap('connectToServer', 'number', ['string', 'number']);\n      const result = connectToServer('127.0.0.1', 8080); // Replace with your server IP and port\n      console.log('Connection result:', result);\n    }\n  };\n\n  return (\n    <div>\n      <button onClick={handleConnect}>Connect</button>\n    </div>\n  );\n};\n\nexport default TcpClientComponent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAElDD,SAAS,CAAC,MAAM;IACd,MAAMQ,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,MAAM,GAAG,MAAM,MAAM,CAAC,mBAAmB,CAAC;QAChDF,aAAa,CAACE,MAAM,CAAC;MACvB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC5D;IACF,CAAC;IAEDF,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAIN,UAAU,EAAE;MACd,MAAMO,eAAe,GAAGP,UAAU,CAACQ,KAAK,CAAC,iBAAiB,EAAE,QAAQ,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;MAC3F,MAAMC,MAAM,GAAGF,eAAe,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;MACnDF,OAAO,CAACK,GAAG,CAAC,oBAAoB,EAAED,MAAM,CAAC;IAC3C;EACF,CAAC;EAED,oBACEZ,OAAA;IAAAc,QAAA,eACEd,OAAA;MAAQe,OAAO,EAAEN,aAAc;MAAAK,QAAA,EAAC;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7C,CAAC;AAEV,CAAC;AAACjB,EAAA,CA7BID,kBAAkB;AAAAmB,EAAA,GAAlBnB,kBAAkB;AA+BxB,eAAeA,kBAAkB;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}